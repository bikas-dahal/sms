

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String          @id @default(cuid())
  name          String
  surname       String
  username      String          @unique
  phone         String          @unique
  image         String?
  address       String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole      
  password      String

  student       Student?        @relation("UserToStudent")
  teacher       Teacher?        @relation("UserToTeacher")
  parent        Parent?         @relation("UserToParent")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}


model Student {
  id          String    @id @default(uuid())
  bloodType   String?
  gender      Gender
  invoices    Invoice[]
  parentId    String
  parent      Parent    @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class     @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade     @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
  userId      String    @unique
  user        User      @relation("UserToStudent", fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("students")
}


model Teacher {
  id        String    @id @default(uuid())
  bloodType String?
  gender    Gender
  subjects  Subject[] @relation(name: "TeacherSubjects")
  lessons   Lesson[]
  classes   Class[]   @relation(name: "TeacherClasses")
  attendences  Attendance[]
  birthday  DateTime
  userId    String    @unique
  user      User      @relation("UserToTeacher", fields: [userId], references: [id], onDelete: Cascade)

  @@map("teachers")
}


model Parent {
  id        String    @id @default(uuid())
  students  Student[]
  userId    String    @unique
  user      User      @relation("UserToParent", fields: [userId], references: [id], onDelete: Cascade)

  @@map("parents")
}



model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classess Class[]
}


model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(name: "TeacherClasses", fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
}


model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]  @relation(name: "TeacherSubjects")
  lessons  Lesson[]
}


model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
}
 
model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}


model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}


model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}


model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String? 
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}


model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}


model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Invoice {
  id            String           @id @default(uuid())
  invoiceNumber String           @unique
  invoiceDate   DateTime
  paymentDate   DateTime?
  amount        Decimal
  method        PaymentMethod
  status        TransactionStatus
  studentId     String
  student       Student         @relation(fields: [studentId], references: [id])
   @@map("invoices")
}


enum Gender {
  MALE
  FEMALE
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum UserRole {
    STUDENT
    TEACHER
    PARENT
    ADMIN
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

